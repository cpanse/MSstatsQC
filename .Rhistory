, mode = "lines"
,showlegend = FALSE,name=""
) %>%
add_trace(x = QCno, y =  Et
,mode = "markers"
, marker=list(color="blue" , size=8 , opacity=0.5)
,showlegend = FALSE,name=""
)
}
CP.plot(prodata = prodata,NULL,NULL,NULL,NULL)
source("data-validation.R")
source("data-validation.R")
source("data-validation.R")
source("/Users/sarataheri/GitHub/MSstatsQC/R/data-validation.R")
source("data-validation.R")
source("/Users/sarataheri/GitHub/MSstatsQC/R/data-validation.R")
CP.plot <- function(prodata, metricData, precursorSelection, ytitle, type) {
prodata <- input_checking(prodata)
if(!is.data.frame(prodata)){
print(prodata)
return()
}
precursor.data <- prodata[prodata$Precursor==precursorSelection,]
## Create variables
plot.data <- CP.data.prepare(prodata, metricData, type)
y.max=max(plot.data$Et) # y axis upper limit
y.min=0 # y axis lower limit
x <- list(
title = paste("QCno - ", precursorSelection)
)
y <- list(
title = ytitle
)
plot_ly(plot.data, x = QCno, y = Et
,type = "scatter"
,line = list(shape = "linear")
,showlegend = FALSE,name=""
, text=precursor.data$Annotations
) %>%
layout(xaxis = x,yaxis = y) %>%
add_trace( x = c(tho.hat,tho.hat), y = c(0, (max(Et)+2))
,marker=list(color="red", size=4, opacity=0.5)
, mode = "lines"
,showlegend = FALSE,name=""
) %>%
add_trace(x = QCno, y =  Et
,mode = "markers"
, marker=list(color="blue" , size=8 , opacity=0.5)
,showlegend = FALSE,name=""
)
}
CP.plot(prodata = prodata,NULL,NULL,NULL,NULL)
source("/Users/sarataheri/GitHub/MSstatsQC/R/data-validation.R")
CP.plot(prodata = prodata,NULL,NULL,NULL,NULL)
source("/Users/sarataheri/GitHub/MSstatsQC/R/data-validation.R")
CP.plot <- function(prodata, metricData, precursorSelection, ytitle, type) {
prodata <- input_checking(prodata)
if(!is.data.frame(prodata)){
print(prodata)
return()
}
precursor.data <- prodata[prodata$Precursor==precursorSelection,]
## Create variables
plot.data <- CP.data.prepare(prodata, metricData, type)
y.max=max(plot.data$Et) # y axis upper limit
y.min=0 # y axis lower limit
x <- list(
title = paste("QCno - ", precursorSelection)
)
y <- list(
title = ytitle
)
plot_ly(plot.data, x = QCno, y = Et
,type = "scatter"
,line = list(shape = "linear")
,showlegend = FALSE,name=""
, text=precursor.data$Annotations
) %>%
layout(xaxis = x,yaxis = y) %>%
add_trace( x = c(tho.hat,tho.hat), y = c(0, (max(Et)+2))
,marker=list(color="red", size=4, opacity=0.5)
, mode = "lines"
,showlegend = FALSE,name=""
) %>%
add_trace(x = QCno, y =  Et
,mode = "markers"
, marker=list(color="blue" , size=8 , opacity=0.5)
,showlegend = FALSE,name=""
)
}
CP.plot(prodata = prodata,NULL,NULL,NULL,NULL)
source("/Users/sarataheri/GitHub/MSstatsQC/R/data-validation.R")
CP.plot <- function(prodata, metricData, precursorSelection, ytitle, type) {
prodata <- input_checking(prodata)
if(!is.data.frame(prodata)){
print(prodata)
return()
}
precursor.data <- prodata[prodata$Precursor==precursorSelection,]
## Create variables
plot.data <- CP.data.prepare(prodata, metricData, type)
y.max=max(plot.data$Et) # y axis upper limit
y.min=0 # y axis lower limit
x <- list(
title = paste("QCno - ", precursorSelection)
)
y <- list(
title = ytitle
)
plot_ly(plot.data, x = QCno, y = Et
,type = "scatter"
,line = list(shape = "linear")
,showlegend = FALSE,name=""
, text=precursor.data$Annotations
) %>%
layout(xaxis = x,yaxis = y) %>%
add_trace( x = c(tho.hat,tho.hat), y = c(0, (max(Et)+2))
,marker=list(color="red", size=4, opacity=0.5)
, mode = "lines"
,showlegend = FALSE,name=""
) %>%
add_trace(x = QCno, y =  Et
,mode = "markers"
, marker=list(color="blue" , size=8 , opacity=0.5)
,showlegend = FALSE,name=""
)
}
CP.plot(prodata = prodata,NULL,NULL,NULL,NULL)
source("/Users/sarataheri/GitHub/MSstatsQC/R/data-validation.R")
CP.plot <- function(prodata, metricData, precursorSelection, ytitle, type) {
prodata <- input_checking(prodata)
if(!is.data.frame(prodata)){
print(prodata)
return()
}
precursor.data <- prodata[prodata$Precursor==precursorSelection,]
## Create variables
plot.data <- CP.data.prepare(prodata, metricData, type)
y.max=max(plot.data$Et) # y axis upper limit
y.min=0 # y axis lower limit
x <- list(
title = paste("QCno - ", precursorSelection)
)
y <- list(
title = ytitle
)
plot_ly(plot.data, x = QCno, y = Et
,type = "scatter"
,line = list(shape = "linear")
,showlegend = FALSE,name=""
, text=precursor.data$Annotations
) %>%
layout(xaxis = x,yaxis = y) %>%
add_trace( x = c(tho.hat,tho.hat), y = c(0, (max(Et)+2))
,marker=list(color="red", size=4, opacity=0.5)
, mode = "lines"
,showlegend = FALSE,name=""
) %>%
add_trace(x = QCno, y =  Et
,mode = "markers"
, marker=list(color="blue" , size=8 , opacity=0.5)
,showlegend = FALSE,name=""
)
}
CP.plot(prodata = prodata,NULL,NULL,NULL,NULL)
source("/Users/sarataheri/GitHub/MSstatsQC/R/data-validation.R")
CP.plot <- function(prodata, metricData, precursorSelection, ytitle, type) {
prodata <- input_checking(prodata)
if(!is.data.frame(prodata)){
print("HI")
stop(prodata)
}
precursor.data <- prodata[prodata$Precursor==precursorSelection,]
## Create variables
plot.data <- CP.data.prepare(prodata, metricData, type)
y.max=max(plot.data$Et) # y axis upper limit
y.min=0 # y axis lower limit
x <- list(
title = paste("QCno - ", precursorSelection)
)
y <- list(
title = ytitle
)
plot_ly(plot.data, x = QCno, y = Et
,type = "scatter"
,line = list(shape = "linear")
,showlegend = FALSE,name=""
, text=precursor.data$Annotations
) %>%
layout(xaxis = x,yaxis = y) %>%
add_trace( x = c(tho.hat,tho.hat), y = c(0, (max(Et)+2))
,marker=list(color="red", size=4, opacity=0.5)
, mode = "lines"
,showlegend = FALSE,name=""
) %>%
add_trace(x = QCno, y =  Et
,mode = "markers"
, marker=list(color="blue" , size=8 , opacity=0.5)
,showlegend = FALSE,name=""
)
}
CP.plot(prodata = prodata,NULL,NULL,NULL,NULL)
source("/Users/sarataheri/GitHub/MSstatsQC/R/getMetricData.R")
shiny::runApp('~/GitHub/msstats-qc')
source("/Users/sarataheri/GitHub/MSstatsQC/R/data-validation.R")
source("/Users/sarataheri/GitHub/MSstatsQC/R/getMetricData.R")
CP.plot <- function(prodata, precursorSelection,L, U, metric, normalization, ytitle, type) {
prodata <- input_checking(prodata)
if(!is.data.frame(prodata)){
print("HI")
stop(prodata)
}
metricData <- getMetricData(prodata, precursorSelection, L, U, metric, normalization)
precursor.data <- prodata[prodata$Precursor==precursorSelection,]
## Create variables
plot.data <- CP.data.prepare(prodata, metricData, type)
y.max=max(plot.data$Et) # y axis upper limit
y.min=0 # y axis lower limit
x <- list(
title = paste("QCno - ", precursorSelection)
)
y <- list(
title = ytitle
)
plot_ly(plot.data, x = QCno, y = Et
,type = "scatter"
,line = list(shape = "linear")
,showlegend = FALSE,name=""
, text=precursor.data$Annotations
) %>%
layout(xaxis = x,yaxis = y) %>%
add_trace( x = c(tho.hat,tho.hat), y = c(0, (max(Et)+2))
,marker=list(color="red", size=4, opacity=0.5)
, mode = "lines"
,showlegend = FALSE,name=""
) %>%
add_trace(x = QCno, y =  Et
,mode = "markers"
, marker=list(color="blue" , size=8 , opacity=0.5)
,showlegend = FALSE,name=""
)
}
CP.plot(prodata, precursorSelection = "TAAYVNAIEK",L = 1, U = 5,metric = "Retention Time", normalization = T, ytitle = "CUSUM Plot", type = 1)
prodata <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Sampledata_CPTAC_Study_9_1_Site54.csv")
CP.plot(prodata, precursorSelection = "TAAYVNAIEK",L = 1, U = 5,metric = "Retention Time", normalization = T, ytitle = "CUSUM Plot", type = 1)
prodata
prodata <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/fakedata12.csv")
prodata$Precursor[1]
CP.plot(prodata, precursorSelection = "VLVLDTDYK",L = 1, U = 5,metric = "flower", normalization = T, ytitle = "CUSUM Plot", type = 1)
?CP.plot
?plot
?CP.plot
#' A Change Point (CP) Function
#'
#' This function allows you to calculate change point statistics for a step change.
#' @param data Comma-separated (*.csv), QC file format. It should contain a Precursor column and the
#' metrics you like
#' @keywords Change point
#'          control chart
#' @export
#' @examples
#' CP.plot()
# INPUTS : "data" is the data user uploads.
#          "metricData" is the column of the data related to the metric we want. Forexample if we want retention time, it gives retention time column
#          "precursorSelection" is the precursor that user selects in Data Import tab. it can be either one precursor(peptide) or it can be "all peptides"
#          "L" and "U" are lower and upper bound of guide set that user choose in Data Import tab.
#          "metric" is one of the metrics that exists in data. You can type the name of the metric column exactly as it appears in your data.
#          "normalization" is either TRUE or FALSE
#          "ytitle" is the title of the plot which is either Individual Value or Moving Range
#          "type" is either 1 or 2. one is "Individual Value" plot and other "Moving Range" plot
#DESCRIPTION: draws one CP plot based on type for each given metric
source("/Users/sarataheri/GitHub/MSstatsQC/R/data-validation.R")
source("/Users/sarataheri/GitHub/MSstatsQC/R/getMetricData.R")
CP.plot <- function(data, precursorSelection,L, U, metric, normalization, ytitle, type) {
data <- input_checking(data)
if(!is.data.frame(data)){
print("HI")
stop(data)
}
metricData <- getMetricData(data, precursorSelection, L, U, metric, normalization)
precursor.data <- data[data$Precursor==precursorSelection,]
## Create variables
plot.data <- CP.data.prepare(data, metricData, type)
y.max=max(plot.data$Et) # y axis upper limit
y.min=0 # y axis lower limit
x <- list(
title = paste("QCno - ", precursorSelection)
)
y <- list(
title = ytitle
)
plot_ly(plot.data, x = QCno, y = Et
,type = "scatter"
,line = list(shape = "linear")
,showlegend = FALSE,name=""
, text=precursor.data$Annotations
) %>%
layout(xaxis = x,yaxis = y) %>%
add_trace( x = c(tho.hat,tho.hat), y = c(0, (max(Et)+2))
,marker=list(color="red", size=4, opacity=0.5)
, mode = "lines"
,showlegend = FALSE,name=""
) %>%
add_trace(x = QCno, y =  Et
,mode = "markers"
, marker=list(color="blue" , size=8 , opacity=0.5)
,showlegend = FALSE,name=""
)
}
?CP.plot
devtools::document()
devtools::document()
?CP.plot
library(MSstatsQC)
?CP.plot
library(MSstatsQC)
library(MSstatsQC)
?CP.plot
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
data$Precursor
View(data)
View(data)
CP.plot(data,"HLVDEPQNLIK",1,5,"Best.RT",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
CP.plot(data,"HLVDEPQNLIK",1,5,"Best.RT",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
CP.plot(data,"HLVDEPQNLIK",1,5,"Best.RT",T,"cp plot",1)
library(levenshteinSim)
install.packages("levenshteinSim")
shiny::runApp('~/GitHub/msstats-qc')
R.Version()
library(RecordLinkage)
CP.plot(data,"HLVDEPQNLIK",1,5,"Best.RT",T,"cp plot",1)
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Best.RT",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Best.RT",T,"cp plot",1)
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
?input_checking
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
library(MSstatsQC)
?XmR.plot
data <- read.csv("/Users/sarataheri/Dropbox/msstatsqc/Data/Study9.1-Site56A.csv")
data$Precursor[1]
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/msstatsqc/Data/Study9.1-Site56A.csv")
?XmR.plot
XmR.plot(data, VLVLDTDYK, 1, 5, "Retention Time",T, "xmr plot",1)
XmR.plot(data, "VLVLDTDYK", 1, 5, "Retention Time",T, "xmr plot",1)
CP.plot(data, "VLVLDTDYK", 1, 5, "Retention Time",T, "xmr plot",1)
MSstatsQC::CP.plot(data, "VLVLDTDYK", 1, 5, "Retention Time",T, "xmr plot",1)
MSstatsQC::XmR.plot(data, "VLVLDTDYK", 1, 5, "Retention Time",T, "xmr plot",1)
XmR.plot(data, "VLVLDTDYK", 1, 5, "Retention Time",T, "xmr plot",1)
MSstatsQC::XmR.plot(data, "VLVLDTDYK", 1, 5, "Retention Time",T, "xmr plot",1)
COL.BEST.RET <- "Retention Time"
COL.FWHM <- "Full Width at Half Maximum"
COL.TOTAL.AREA <- "Total Peak Area"
COL.PEAK.ASS <- "Peak Assymetry"
XmR.plot(data, "VLVLDTDYK", 1, 5, "Retention Time",T, "xmr plot",1)
data <- read.csv("/Users/sarataheri/Dropbox/msstatsqc/Data/Study9.1-Site56A.csv")
XmR.plot(data, "VLVLDTDYK", 1, 5, "Retention Time",T, "xmr plot",1)
CP.plot(data, "VLVLDTDYK", 1, 5, "Retention Time",T, "xmr plot",1)
library(MSstatsQC)
CP.plot(data, "VLVLDTDYK", 1, 5, "Retention Time",T, "xmr plot",1)
XmR.plot(data, "VLVLDTDYK", 1, 5, "Retention Time",T, "xmr plot",1)
?CUSUM.plot
library(MSstatsQC)
CUSUM.plot(data, "VLVLDTDYK", 1, 5, "Retention Time",T, "xmr plot",1)
library(MSstatsQC)
CUSUM.plot(data, "VLVLDTDYK", 1, 5, "Retention Time",T, "xmr plot",1)
CUSUM.plot(data, "VLVLDTDYK", 1, 5, "Retention Time",T, "xmr plot",2)
shiny::runApp('~/Documents/msstats-qc/previouse code')
runApp('~/Documents/msstats-qc/previouse code')
runApp('~/Documents/msstats-qc/previouse code')
runApp('~/Documents/msstats-qc/previouse code')
runApp('~/Documents/msstats-qc/previouse code')
install.packages("Rmisc")
install.packages("rsconnect")
install.packages("GGally")
runApp('~/Documents/msstats-qc/previouse code')
library(MSstatsQC)
data$Precursor[1]
CP.plot(data,"VLVLDTDYK",1,5,"Retention Time",T,"cp plot","mean")
CP.plot(data,"VLVLDTDYK",1,5,"Retention Time",T,"cp plot","dispersion")
?CUSUM.plot
foo <- function(x = 1) {
x+2
}
foo()
foo(x = 2)
library(MSstatsQC)
?CUSUM.plot
data$Precursor[1]
CP.plot(data,"VLVLDTDYK",1,5,"Retention Time",T,"cp plot","dispersion")
CUSUM.plot(data,"VLVLDTDYK",1,5,"Retention Time",T,"cusum plot","dispersion")
CUSUM.plot(data,"VLVLDTDYK",1,5,"Retention Time",T,"cusum plot","mean")
XmR.plot(data,"VLVLDTDYK",1,5,"Retention Time",T,"cusum plot","mean")
XmR.plot(data,"VLVLDTDYK",1,5,"Retention Time",T,"cusum plot","dispersion")
library(MSstatsQC)
?CUSUM.plot
library(MSstatsQC)
?CUSUM.plot
?CUSUM.plot
library(MSstatsQC)
?CUSUM.plot
?CUSUM.plot
CUSUM.plot(data,"VLVLDTDYK",1,5,"Retention Time",T,"cusum plot","mean")
library(MSstatsQC)
?CUSUM.plot
library(MSstatsQC)
?CP.plot
library(MSstatsQC)
?CP.plot
library(MSstatsQC)
?CUSUM.plot
data$Precursor[1]
CUSUM.plot(data,"VLVLDTDYK",1,5,"Retention Time",T,"cusum plot","mean")
CUSUM.plot(data,"VLVLDTDYK",1,5,"Best.RT",T,"cusum plot","mean")
CUSUM.plot(data,"VLVLDTDYK",1,5,"Retention Time",T,"cusum plot","mean")
XmR.plot(data,"VLVLDTDYK",1,5,"Retention Time",T,"cusum plot","mean")
CP.plot(data,"VLVLDTDYK",1,5,"Retention Time",T,"cusum plot","mean")
library(MSstatsQC)
library(MSstatsQC)
library(MSstatsQC)
library(MSstatsQC)
?XmR.plot
library(MSstatsQC)
?XmR.plot
library(MSstatsQC)
?XmR.plot
library(MSstatsQC)
?CP.plot
library(MSstatsQC)
?CP.plot
library(MSstatsQC)
library(MSstatsQC)
data$Precursor[1]
XmR.Summary.plot(data,1,5)
library(MSstatsQC)
XmR.Summary.plot(data,1,5)
XmR.Summary.plot(data,1,5)
library(MSstatsQC)
library(MSstatsQC)
?XmR.Summary.plot
data$Precursor[1]
XmR.Summary.plot(data,1,5)
library(MSstatsQC)
XmR.Summary.plot(data,1,5)
library(MSstatsQC)
XmR.Summary.plot(data,1,5)
library(MSstatsQC)
XmR.Summary.plot(data,1,5)
library(MSstatsQC)
XmR.Summary.plot(data,1,5)
library(MSstatsQC)
XmR.Summary.plot(data,1,5)
library(MSstatsQC)
library(MSstatsQC)
XmR.Summary.plot(data,1,5)
library(MSstatsQC)
XmR.Summary.plot(data,1,5)
library(MSstatsQC)
XmR.Summary.plot(data,1,5)
library(MSstatsQC)
XmR.Summary.plot(data,1,5)
library(MSstatsQC)
CUSUM.Summary.plot(data,1,5)
library(MSstatsQC)
CUSUM.Summary.plot(data,1,5)
library("grid", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(MSstatsQC)
CUSUM.Summary.plot(data,1,5)
?CUSUM.Summary.plot
?XmR.Summary.plot

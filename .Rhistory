install.packages("roxygen2")
library("roxygen2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(MSstatsQC)
?MSstataQC
?CUSUM.plot
prodata <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Sampledata_CPTAC_Study_9_1_Site54.csv")
getMetricData <- function(prodata, precursorSelection, L, U, metric, normalization) {
precursor.data<-prodata[prodata$Precursor==precursorSelection,] #"Precursor" is one of the columns in data that shows the name of peptides
metricData <- 0
if(is.null(metric)){
return(NULL)
}
metricData = precursor.data[,metric]
if(normalization == TRUE) {
mu=mean(metricData[L:U]) # in-control process mean
sd=sd(metricData[L:U]) # in-control process variance
if(sd == 0) {sd <- 0.0001}
metricData=scale(metricData[1:length(metricData)],mu,sd) # transformation for N(0,1) )
return(metricData)
} else if(normalization == FALSE){
return(metricData)
}
}
prodata$Precursor[1]
metricData <- getMetricData(prodata, "TAAYVNAIEK", L = 1, U = 5, metric = "Retention Time", normalization = T)
prodata <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/fakedata4.csv")
CP.plot(prodata = prodata)
CP.plot(prodata = prodata,NULL,NULL,NULL,NULL)
CP.plot <- function(prodata, metricData, precursorSelection, ytitle, type) {
prodata <- input_checking(prodata)
if(!is.data.frame(prodata)){
print(prodata)
return()
}
precursor.data <- prodata[prodata$Precursor==precursorSelection,]
## Create variables
plot.data <- CP.data.prepare(prodata, metricData, type)
y.max=max(plot.data$Et) # y axis upper limit
y.min=0 # y axis lower limit
x <- list(
title = paste("QCno - ", precursorSelection)
)
y <- list(
title = ytitle
)
plot_ly(plot.data, x = QCno, y = Et
,type = "scatter"
,line = list(shape = "linear")
,showlegend = FALSE,name=""
, text=precursor.data$Annotations
) %>%
layout(xaxis = x,yaxis = y) %>%
add_trace( x = c(tho.hat,tho.hat), y = c(0, (max(Et)+2))
,marker=list(color="red", size=4, opacity=0.5)
, mode = "lines"
,showlegend = FALSE,name=""
) %>%
add_trace(x = QCno, y =  Et
,mode = "markers"
, marker=list(color="blue" , size=8 , opacity=0.5)
,showlegend = FALSE,name=""
)
}
CP.plot(prodata = prodata,NULL,NULL,NULL,NULL)
source("data-validation.R")
source("data-validation.R")
source("data-validation.R")
source("/Users/sarataheri/GitHub/MSstatsQC/R/data-validation.R")
source("data-validation.R")
source("/Users/sarataheri/GitHub/MSstatsQC/R/data-validation.R")
CP.plot <- function(prodata, metricData, precursorSelection, ytitle, type) {
prodata <- input_checking(prodata)
if(!is.data.frame(prodata)){
print(prodata)
return()
}
precursor.data <- prodata[prodata$Precursor==precursorSelection,]
## Create variables
plot.data <- CP.data.prepare(prodata, metricData, type)
y.max=max(plot.data$Et) # y axis upper limit
y.min=0 # y axis lower limit
x <- list(
title = paste("QCno - ", precursorSelection)
)
y <- list(
title = ytitle
)
plot_ly(plot.data, x = QCno, y = Et
,type = "scatter"
,line = list(shape = "linear")
,showlegend = FALSE,name=""
, text=precursor.data$Annotations
) %>%
layout(xaxis = x,yaxis = y) %>%
add_trace( x = c(tho.hat,tho.hat), y = c(0, (max(Et)+2))
,marker=list(color="red", size=4, opacity=0.5)
, mode = "lines"
,showlegend = FALSE,name=""
) %>%
add_trace(x = QCno, y =  Et
,mode = "markers"
, marker=list(color="blue" , size=8 , opacity=0.5)
,showlegend = FALSE,name=""
)
}
CP.plot(prodata = prodata,NULL,NULL,NULL,NULL)
source("/Users/sarataheri/GitHub/MSstatsQC/R/data-validation.R")
CP.plot(prodata = prodata,NULL,NULL,NULL,NULL)
source("/Users/sarataheri/GitHub/MSstatsQC/R/data-validation.R")
CP.plot <- function(prodata, metricData, precursorSelection, ytitle, type) {
prodata <- input_checking(prodata)
if(!is.data.frame(prodata)){
print(prodata)
return()
}
precursor.data <- prodata[prodata$Precursor==precursorSelection,]
## Create variables
plot.data <- CP.data.prepare(prodata, metricData, type)
y.max=max(plot.data$Et) # y axis upper limit
y.min=0 # y axis lower limit
x <- list(
title = paste("QCno - ", precursorSelection)
)
y <- list(
title = ytitle
)
plot_ly(plot.data, x = QCno, y = Et
,type = "scatter"
,line = list(shape = "linear")
,showlegend = FALSE,name=""
, text=precursor.data$Annotations
) %>%
layout(xaxis = x,yaxis = y) %>%
add_trace( x = c(tho.hat,tho.hat), y = c(0, (max(Et)+2))
,marker=list(color="red", size=4, opacity=0.5)
, mode = "lines"
,showlegend = FALSE,name=""
) %>%
add_trace(x = QCno, y =  Et
,mode = "markers"
, marker=list(color="blue" , size=8 , opacity=0.5)
,showlegend = FALSE,name=""
)
}
CP.plot(prodata = prodata,NULL,NULL,NULL,NULL)
source("/Users/sarataheri/GitHub/MSstatsQC/R/data-validation.R")
CP.plot <- function(prodata, metricData, precursorSelection, ytitle, type) {
prodata <- input_checking(prodata)
if(!is.data.frame(prodata)){
print(prodata)
return()
}
precursor.data <- prodata[prodata$Precursor==precursorSelection,]
## Create variables
plot.data <- CP.data.prepare(prodata, metricData, type)
y.max=max(plot.data$Et) # y axis upper limit
y.min=0 # y axis lower limit
x <- list(
title = paste("QCno - ", precursorSelection)
)
y <- list(
title = ytitle
)
plot_ly(plot.data, x = QCno, y = Et
,type = "scatter"
,line = list(shape = "linear")
,showlegend = FALSE,name=""
, text=precursor.data$Annotations
) %>%
layout(xaxis = x,yaxis = y) %>%
add_trace( x = c(tho.hat,tho.hat), y = c(0, (max(Et)+2))
,marker=list(color="red", size=4, opacity=0.5)
, mode = "lines"
,showlegend = FALSE,name=""
) %>%
add_trace(x = QCno, y =  Et
,mode = "markers"
, marker=list(color="blue" , size=8 , opacity=0.5)
,showlegend = FALSE,name=""
)
}
CP.plot(prodata = prodata,NULL,NULL,NULL,NULL)
source("/Users/sarataheri/GitHub/MSstatsQC/R/data-validation.R")
CP.plot <- function(prodata, metricData, precursorSelection, ytitle, type) {
prodata <- input_checking(prodata)
if(!is.data.frame(prodata)){
print(prodata)
return()
}
precursor.data <- prodata[prodata$Precursor==precursorSelection,]
## Create variables
plot.data <- CP.data.prepare(prodata, metricData, type)
y.max=max(plot.data$Et) # y axis upper limit
y.min=0 # y axis lower limit
x <- list(
title = paste("QCno - ", precursorSelection)
)
y <- list(
title = ytitle
)
plot_ly(plot.data, x = QCno, y = Et
,type = "scatter"
,line = list(shape = "linear")
,showlegend = FALSE,name=""
, text=precursor.data$Annotations
) %>%
layout(xaxis = x,yaxis = y) %>%
add_trace( x = c(tho.hat,tho.hat), y = c(0, (max(Et)+2))
,marker=list(color="red", size=4, opacity=0.5)
, mode = "lines"
,showlegend = FALSE,name=""
) %>%
add_trace(x = QCno, y =  Et
,mode = "markers"
, marker=list(color="blue" , size=8 , opacity=0.5)
,showlegend = FALSE,name=""
)
}
CP.plot(prodata = prodata,NULL,NULL,NULL,NULL)
source("/Users/sarataheri/GitHub/MSstatsQC/R/data-validation.R")
CP.plot <- function(prodata, metricData, precursorSelection, ytitle, type) {
prodata <- input_checking(prodata)
if(!is.data.frame(prodata)){
print("HI")
stop(prodata)
}
precursor.data <- prodata[prodata$Precursor==precursorSelection,]
## Create variables
plot.data <- CP.data.prepare(prodata, metricData, type)
y.max=max(plot.data$Et) # y axis upper limit
y.min=0 # y axis lower limit
x <- list(
title = paste("QCno - ", precursorSelection)
)
y <- list(
title = ytitle
)
plot_ly(plot.data, x = QCno, y = Et
,type = "scatter"
,line = list(shape = "linear")
,showlegend = FALSE,name=""
, text=precursor.data$Annotations
) %>%
layout(xaxis = x,yaxis = y) %>%
add_trace( x = c(tho.hat,tho.hat), y = c(0, (max(Et)+2))
,marker=list(color="red", size=4, opacity=0.5)
, mode = "lines"
,showlegend = FALSE,name=""
) %>%
add_trace(x = QCno, y =  Et
,mode = "markers"
, marker=list(color="blue" , size=8 , opacity=0.5)
,showlegend = FALSE,name=""
)
}
CP.plot(prodata = prodata,NULL,NULL,NULL,NULL)
source("/Users/sarataheri/GitHub/MSstatsQC/R/getMetricData.R")
shiny::runApp('~/GitHub/msstats-qc')
source("/Users/sarataheri/GitHub/MSstatsQC/R/data-validation.R")
source("/Users/sarataheri/GitHub/MSstatsQC/R/getMetricData.R")
CP.plot <- function(prodata, precursorSelection,L, U, metric, normalization, ytitle, type) {
prodata <- input_checking(prodata)
if(!is.data.frame(prodata)){
print("HI")
stop(prodata)
}
metricData <- getMetricData(prodata, precursorSelection, L, U, metric, normalization)
precursor.data <- prodata[prodata$Precursor==precursorSelection,]
## Create variables
plot.data <- CP.data.prepare(prodata, metricData, type)
y.max=max(plot.data$Et) # y axis upper limit
y.min=0 # y axis lower limit
x <- list(
title = paste("QCno - ", precursorSelection)
)
y <- list(
title = ytitle
)
plot_ly(plot.data, x = QCno, y = Et
,type = "scatter"
,line = list(shape = "linear")
,showlegend = FALSE,name=""
, text=precursor.data$Annotations
) %>%
layout(xaxis = x,yaxis = y) %>%
add_trace( x = c(tho.hat,tho.hat), y = c(0, (max(Et)+2))
,marker=list(color="red", size=4, opacity=0.5)
, mode = "lines"
,showlegend = FALSE,name=""
) %>%
add_trace(x = QCno, y =  Et
,mode = "markers"
, marker=list(color="blue" , size=8 , opacity=0.5)
,showlegend = FALSE,name=""
)
}
CP.plot(prodata, precursorSelection = "TAAYVNAIEK",L = 1, U = 5,metric = "Retention Time", normalization = T, ytitle = "CUSUM Plot", type = 1)
prodata <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Sampledata_CPTAC_Study_9_1_Site54.csv")
CP.plot(prodata, precursorSelection = "TAAYVNAIEK",L = 1, U = 5,metric = "Retention Time", normalization = T, ytitle = "CUSUM Plot", type = 1)
prodata
prodata <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/fakedata12.csv")
prodata$Precursor[1]
CP.plot(prodata, precursorSelection = "VLVLDTDYK",L = 1, U = 5,metric = "flower", normalization = T, ytitle = "CUSUM Plot", type = 1)
?CP.plot
?plot
?CP.plot
#' A Change Point (CP) Function
#'
#' This function allows you to calculate change point statistics for a step change.
#' @param data Comma-separated (*.csv), QC file format. It should contain a Precursor column and the
#' metrics you like
#' @keywords Change point
#'          control chart
#' @export
#' @examples
#' CP.plot()
# INPUTS : "data" is the data user uploads.
#          "metricData" is the column of the data related to the metric we want. Forexample if we want retention time, it gives retention time column
#          "precursorSelection" is the precursor that user selects in Data Import tab. it can be either one precursor(peptide) or it can be "all peptides"
#          "L" and "U" are lower and upper bound of guide set that user choose in Data Import tab.
#          "metric" is one of the metrics that exists in data. You can type the name of the metric column exactly as it appears in your data.
#          "normalization" is either TRUE or FALSE
#          "ytitle" is the title of the plot which is either Individual Value or Moving Range
#          "type" is either 1 or 2. one is "Individual Value" plot and other "Moving Range" plot
#DESCRIPTION: draws one CP plot based on type for each given metric
source("/Users/sarataheri/GitHub/MSstatsQC/R/data-validation.R")
source("/Users/sarataheri/GitHub/MSstatsQC/R/getMetricData.R")
CP.plot <- function(data, precursorSelection,L, U, metric, normalization, ytitle, type) {
data <- input_checking(data)
if(!is.data.frame(data)){
print("HI")
stop(data)
}
metricData <- getMetricData(data, precursorSelection, L, U, metric, normalization)
precursor.data <- data[data$Precursor==precursorSelection,]
## Create variables
plot.data <- CP.data.prepare(data, metricData, type)
y.max=max(plot.data$Et) # y axis upper limit
y.min=0 # y axis lower limit
x <- list(
title = paste("QCno - ", precursorSelection)
)
y <- list(
title = ytitle
)
plot_ly(plot.data, x = QCno, y = Et
,type = "scatter"
,line = list(shape = "linear")
,showlegend = FALSE,name=""
, text=precursor.data$Annotations
) %>%
layout(xaxis = x,yaxis = y) %>%
add_trace( x = c(tho.hat,tho.hat), y = c(0, (max(Et)+2))
,marker=list(color="red", size=4, opacity=0.5)
, mode = "lines"
,showlegend = FALSE,name=""
) %>%
add_trace(x = QCno, y =  Et
,mode = "markers"
, marker=list(color="blue" , size=8 , opacity=0.5)
,showlegend = FALSE,name=""
)
}
?CP.plot
devtools::document()
devtools::document()
?CP.plot
library(MSstatsQC)
?CP.plot
library(MSstatsQC)
library(MSstatsQC)
?CP.plot
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
data$Precursor
View(data)
View(data)
CP.plot(data,"HLVDEPQNLIK",1,5,"Best.RT",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
CP.plot(data,"HLVDEPQNLIK",1,5,"Best.RT",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
CP.plot(data,"HLVDEPQNLIK",1,5,"Best.RT",T,"cp plot",1)
library(levenshteinSim)
install.packages("levenshteinSim")
shiny::runApp('~/GitHub/msstats-qc')
R.Version()
library(RecordLinkage)
CP.plot(data,"HLVDEPQNLIK",1,5,"Best.RT",T,"cp plot",1)
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Best.RT",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Best.RT",T,"cp plot",1)
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
?input_checking
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)
library(MSstatsQC)
data <- read.csv("/Users/sarataheri/Dropbox/MSstatsQC/Data/Study9.1-Site56C.csv")
MSstatsQC::CP.plot(data,"HLVDEPQNLIK",1,5,"Retention Time",T,"cp plot",1)

{
    "collab_server" : "",
    "contents" : "\n#library(RecordLinkage)\n\nCOL.BEST.RET <- \"Retention Time\"\nCOL.FWHM <- \"Full Width at Half Maximum\"\nCOL.TOTAL.AREA <- \"Total Peak Area\"\nCOL.PEAK.ASS <- \"Peak Assymetry\"\n#########################################################################################\n# here we put a selection of most column names that users use. The first element of each vector should be the best name that\n# we suggest users to use and  which our code is based on. for example \"Retention Time\" and \"Full Width at Half Maximum\" which are the first element\n# of each vector in the list, are our suggestion so we wrote them in the fisrt place.\nbest_colnames <- list(\n  c(\"AcquiredTime\",\"Acquired.Time\",\"time\"),\n  c(\"Retention Time\",\"BestRetentionTime\" ,\"Best.RT\",\"best retention time\", \"retention time\",\"rt\",\"best ret time\",\"intensity\",\"Best RT\"),\n  c(\"Full Width at Half Maximum\",\"MaxFWHM\",\"fwhm\",\"max.fwhm\", \"Max FWHM\"),\n  c(\"Total Peak Area\",\"Total Area\",\"TotalArea\",\"total area\",\"TA\",\"T.Area\"),\n  c(\"MinStartTime\",\"min start time\",\"Min Start Time\"),\n  c(\"MaxEndTime\", \"max end time\",\"Max End Time\"),\n  c(\"Precursor\",\"PeptideSequence\"),\n  c(\"Annotations\",\"anotations\")\n)\n#### camelCaseSplit function ##############################################################################################\ncamelCaseSplit <- function(x) {\n  # This function get a camelCase word and splits it.\n  # Ex : camelCaseSplit(\"myComputerIsHere\") ---> my Computer Is Here\n  return(gsub(\"([a-z])([A-Z])\", \"\\\\1 \\\\L\\\\2\", x, perl = TRUE))\n}\n#### punc_remove function #################################################################################################\npunc_remove <- function(x){\n  # This function removes any existing punctuation in your sentence or word and transfer it to space.\n  # Ex1: punc_remove(Best.RT) --> Best RT     #Ex2: punc_remove(Best_RT) --> Best RT\n  return(gsub(\"[[:punct:]///' ]\", \" \", x))\n}\n#### clearString function ###############################################################################################\nclearString <- function(x){\n  # This function, gets a word or setence, Splits it (if it is a camelCase), removes any existing punctuations, and transfer\n  # all Upper Case letters to lower case letters.\n  # Ex: clearString(\"myName_isSara.Taheri\") --> my name is sara taheri\n  return(tolower(punc_remove(camelCaseSplit(x))))\n}\n#### guessColumnName function ###########################################################################################\n\n# This function receives the data and check the column names of data and changes the column names if it is not the\n# same names as our suggested sample data to fit our suggested sample data\nguessColumnName <- function(x){\n\na <- clearString(x)\n\n  max_index <- 0\n  max <- -1\n  for(i in 1:length(best_colnames)){\n    col <- best_colnames[[i]]\n    for(j in 1:length(col)){\n      sim <- levenshteinSim(a,clearString(col[j]))\n      if(sim > max){\n        max <- sim\n        max_index <- i\n      }\n    }\n  }\n  if (max > 0.6) {\n    return(best_colnames[[max_index]][1])\n  }\n  else {\n    return(x)\n  }\n}\n\ninput.sanity.check <- function(prodata, finalfile) {\n\n  error_message <- \"\"\n\n  # get the column names and change them to the column names that we want (For ecample we want Retention Time but a user might use RT, this function auotomatically change RT to Retention Time)\n  colnames(prodata) <- unlist(lapply(colnames(prodata), function(x)guessColumnName(x)))\n\n\n  ### conditions\n  # check that the data includes all the requiered columns and if not tell user what column is missing\n  required_column_names <- c(\"Precursor\",\"Retention Time\",\"Full Width at Half Maximum\",\"Total Peak Area\",\"MinStartTime\"\n                             ,\"MaxEndTime\")\n  provided_column_names <- colnames(prodata)\n  if(!all(required_column_names %in% provided_column_names)) {\n    missedInput <- which(!(required_column_names %in% provided_column_names))\n    error_message <- paste(\"ERROR : The required input(inputs) : \",\n                           paste(required_column_names[missedInput], collapse = \", \"),\n                           \" is(are) not provided in data set. Please add it to your data and try again.\\n\\n\")\n    #return(error_message)\n  }\n\n  # check that all columns other than Precursor and Acquired Time and Annotations are numeric.\n   if(!is.numeric(prodata[,COL.BEST.RET]) || !all(prodata[,COL.BEST.RET] > 0)) {\n     error_message <- paste(error_message, \"All the values of Retention Time should be numeric and positive.\\n\\n\")\n     #return(error_message)\n   }\n\n\n   if(!is.numeric(prodata[,COL.FWHM]) || !all(prodata[,COL.FWHM] > 0)) {\n     error_message <- paste(error_message,\"All the values of Full Width at Half Maximum should be numeric and positive.\\n\\n\")\n     #return(error_message)\n   }\n\n  if(!is.numeric(prodata[,COL.TOTAL.AREA]) || !all(prodata[,COL.TOTAL.AREA] > 0)) {\n    error_message <- paste(error_message,\"All the values of Total Peak Area should be numeric and positive.\\n\\n\")\n    #return(error_message)\n  }\n\n\n  if(!is.numeric(prodata$MaxEndTime) || !all(prodata$MaxEndTime > 0)) {\n    error_message <- paste(error_message,\"All the values of Max End Time should be numeric and positive.\\n\\n\")\n    #return(error_message)\n  }\n\n  if(!is.numeric(prodata$MinStartTime) || !all(prodata$MinStartTime > 0)) {\n    error_message <- paste(error_message,\"All the values of Min End Time should be numeric and positive. \\n\\n\")\n    #return(error_message)\n  }\n\n  if(error_message != \"\") {\n    return(paste(error_message, \"Please check the values to make sure all the inputs are numeric and positive and then try again.\"))\n  }\n  # for custom metrics we are checking them to be numeric in QCMetrics in \"find_custom_metrics\" function and only accepting numeric columns after Annotation\n\n  # if there is any missing value in data replace it with NA\n  prodata[prodata==\"\"] <- NA\n  # some times numeric values of some users are like 333,222 which is not acceptable and we convert it to 333222 by replacing \",\" to \"\"\n  prodata[,\"Full Width at Half Maximum\"] <- as.numeric(gsub(\",\",\"\",prodata[,\"Full Width at Half Maximum\"]))\n  prodata[,\"Total Peak Area\"] <- as.numeric(gsub(\",\",\"\",prodata[,\"Total Peak Area\"]))\n  prodata[,\"Retention Time\"] <- as.numeric(gsub(\",\",\"\",prodata[,\"Retention Time\"]))\n  prodata$MaxEndTime <- as.numeric(gsub(\",\",\"\",prodata$MaxEndTime))\n  prodata$MinStartTime <- as.numeric(gsub(\",\",\"\",prodata$MinStartTime))\n  # Define peak assymetry\n  peakAss <- 2*prodata$MinStartTime/(prodata$MaxEndTime+prodata$MinStartTime)\n  # locate a new column named \"Peak Assymetry\" right after the column named \"MaxEndTime\"\n  prodata.first <- prodata[,1:which(colnames(prodata)==\"MaxEndTime\")]\n  prodata.first[,\"Peak Assymetry\"]<- peakAss\n  prodata <- cbind(prodata.first, prodata[,(which(colnames(prodata)==\"MaxEndTime\")+1):ncol(prodata), drop = FALSE])\n  # some data migh have annotation column, some might not have. If it doesn't, we create an empty \"Annotation\" column at the very end column of the data\n  if(!(\"Annotations\" %in% colnames(prodata))) {\n    prodata[,\"Annotations\"] <- NA\n  }\n\n  return(prodata)\n\n}\n\n### Input_checking function #########################################################################################\n\ninput_checking <- function(data){\n\n  ## save process output in each step #### creating a log file ########### from Meena's code\n  allfiles <- list.files()\n\n  num <- 0\n  filenaming <- \"./log/msstatsqc\"\n  finalfile <- \"msstatsqc.log\"\n\n  while(is.element(finalfile,allfiles)) {\n    num <- num+1\n    finalfile <- paste(paste(filenaming,num,sep=\"-\"),\".log\",sep=\"\")\n  }\n\n  #session <- sessionInfo()\n  #sink(\"./log/sessionInfo.txt\")\n  #print(session)\n  #sink()\n\n  #processout <- as.matrix(read.table(\"./log/sessionInfo.txt\", header=T, sep=\"\\t\"))\n  #write.table(processout, file=finalfile, row.names=FALSE)\n\n  #processout <- rbind(processout, as.matrix(c(\" \",\" \",\"MSstatsqc - dataProcess function\",\" \"),ncol=1))\n\n  data <- input.sanity.check(data, finalfile)\n\n\n  return(data)\n}\n",
    "created" : 1483810623740.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2456706329",
    "id" : "69D89FAD",
    "lastKnownWriteTime" : 1483755789,
    "last_content_update" : 1483755789,
    "path" : "~/GitHub/MSstatsQC/R/data-validation.R",
    "project_path" : "R/data-validation.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}